/******************************************************* {COPYRIGHT-TOP-RM} ***
* Licensed Materials - Property of IBM
* "Restricted Materials of IBM"
* 5724-S43
*
* (C) Copyright IBM Corporation 2009, 2014. All Rights Reserved.
*
* US Government Users Restricted Rights - Use, duplication, or
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
******************************************************** {COPYRIGHT-END-RM} **/

/*** This Policy retrieves Recurring Day of Week Windows for display ***/
/*   ===============================================================   */

// Functions
function getDOWArray(dowString, dowArray) {
	Log(2, "Function getDOWArray");
	Log(3, "dowString = " + dowString);
	dowArray = {};
	dowStringArray  = Split(dowString, "|");
	Log(3, "dowStringArray = " + dowStringArray);
	n = 0;
	While(n < length(dowStringArray)) {
		If (dowStringArray[n] != NULL) {
			dowArray = dowArray + dowStringArray[n];
		}
		n = n + 1;
	}
	Log(2, "dowArray is = " + dowArray);
}

function inArray(x, theArray, boo) {
	Log(2, "Function inArray");
	Log(3, "Target is: " + x);
	Log(3, "Array is: " + theArray);
	boo = FALSE;
	n = 0;
	While (n < Length(theArray)) {
		If (x == theArray[n]) {
			boo = TRUE;
		}
		n = n + 1;
	}
	Log(3, "Return is " + boo);
}

function transformHHMMSS(hhmmss, intArray) {
	Log(2, "Function transformHHMMSS");
	Log(3, "hhmmss is: " + hhmmss);
	tempArray = Split(hhmmss, ":");
	intArray = {};
	n = 0;
	While (n < Length(tempArray)) {
		intArray = intArray + Int(tempArray[n]);
		n = n + 1;
	}
	Log(3, "intArray is: " + intArray);
}

// Deletes
// =======
// Code for handling deletes
If (@mwid != NULL) {
	Opview_openwins.deleteWindow(@mwid);
}

// SETUP
// =====
// Get UTC
UTC = GetDate();
Log(2, "Current epoch GMT time is : " + UTC);

// Start of HTML
htmltext1 = "<table><tr><th>Suppression Filter</th><th>Weekdays</th><th>Start Time</th><th>End Time</th><th>Time Zone</th><th>Status</th><th>Delete</th></tr>";

// Get all the windows in the DB
recdow = DirectSQL('ImpactDB', 'SELECT * FROM IMPACT.MM_WINDOWS WHERE WINTYPE = 2', false);

// Loop through the windows and create the appropriate HTML
// ========================================================
If (Length(recdow) > 0) {
	Log(3, "Found some DoW windows");
	winCount = 0;
	While (winCount < Length(recdow)) {
		// Getting display value for time zone
		Opview_onetwins.getTZDisplayValue(recdow[winCount].timezone, displayTZ);
		// Getting display value for the filterstat
		Opview_openwins.shineFilter(recdow[winCount].filterstat, displayFilterstat);
		// Getting display value for the DoW
		Opview_openwins.shineDoW(recdow[winCount].daysofweek, displayDoW);
		// Get the current time in that time zone
		MWM.newCalendar(recdow[winCount].timezone, UTC, calendar, false);
		// Get DoW
		MWM.getDOW(recdow[winCount].timezone, calendar, DOW);
		// Type 4   getNTH(tzArray[n], calendar, NTH);
		// Turn the | separated DoW values from the DB into an array
		getDOWArray(recdow[winCount].daysofweek, dowArray);
		// Determine if the current DOW is in the array
		inArray(DOW, dowArray, DOWboo);
		If (DOWboo) {
			// TRUE...today is one of the dates
			Log(3, "Day of Week matches");
			// Get clock times for comparison
			// Get current HHMMSS
			MWM.getHHMMSS(calendar, HHMMSSstring);
			// Convert to integers for comparisons
			transformHHMMSS(HHMMSSstring, currentClockTime);
			transformHHMMSS(recdow[winCount].r_starttime, startClockTime);
			transformHHMMSS(recdow[winCount].r_endtime, endClockTime);
			// Convert to seconds for comparison
			// [0] = hour, [1] = minutes, [2] = seconds
			currentSeconds = (currentClockTime[0] * 3600) + (currentClockTime[1] * 60) + (currentClockTime[2]);
			startSeconds = (startClockTime[0] * 3600) + (startClockTime[1] * 60) + (startClockTime[2]);
			endSeconds = (endClockTime[0] * 3600) + (endClockTime[1] * 60) + (endClockTime[2]);
			If ((currentSeconds >= startSeconds) and (currentSeconds < endSeconds)) {
				Log(3, "Time matches");
				htmltext1 = htmltext1 + "<tr><td>" + displayFilterstat + "</td><td>" + displayDoW + "</td>";
				htmltext1 = htmltext1 + "<td>" + recdow[winCount].r_starttime + "</td><td>" + recdow[winCount].r_endtime + "</td>";
				htmltext1 = htmltext1 + "<td>" + displayTZ + "</td>";
				htmltext1 = htmltext1 + "<td align='center'><img src='../assets/installed/mwms/activestat.jpg' border=0 /></td>";
			} Else {
				Log(3, "Time doesn't match");
				htmltext1 = htmltext1 + "<tr><td>" + displayFilterstat + "</td><td>" + displayDoW + "</td>";
				htmltext1 = htmltext1 + "<td>" + recdow[winCount].r_starttime + "</td><td>" + recdow[winCount].r_endtime + "</td>";
				htmltext1 = htmltext1 + "<td>" + displayTZ + "</td>";
				htmltext1 = htmltext1 + "<td align='center'><img src='../assets/installed/mwms/inactivestat.jpg' border=0 /></td>";
			}
		} Else {
			Log(3, "Day of Week doesn't match");
			htmltext1 = htmltext1 + "<tr><td>" + displayFilterstat + "</td><td>" + displayDoW + "</td>";
			htmltext1 = htmltext1 + "<td>" + recdow[winCount].r_starttime + "</td><td>" + recdow[winCount].r_endtime + "</td>";
			htmltext1 = htmltext1 + "<td>" + displayTZ + "</td>";
			htmltext1 = htmltext1 + "<td align='center'><img src='../assets/installed/mwms/inactivestat.jpg' border=0 /></td>";
		}
		htmltext1 = htmltext1 + "<td align='center'><a href='"+getClusterName()+"-rdowwins.html?mwid=" + recdow[winCount].mwid + "&securityTokenHiddenValue=<!--token:-->'><img src='../assets/installed/mwms/delete.jpg' border=0 alt='Delete Window'/></a></td></tr>";
		winCount = winCount + 1;
	}
} Else {
	// No DOW windows
	htmltext1 = htmltext1 + "<tr><td>There are currently no recurring Day of Week windows.</td></tr>";
}
htmltext1 = htmltext1 + "</table>";
Log(3, "htmltext1: " + htmltext1);
